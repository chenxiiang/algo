package cx.leetcode.dp.maxprofit;

/**
 * 不限交易次数
 */
public class Solution188 {
//    这个问题的「状态」有三个，第一个是天数，第二个是允许交易的最大次数，第三个是当前的持有状态（即之前说的 rest 的状态，我们不妨用 1 表示持有，0 表示没有持有）。
//    然后我们用一个三维数组就可以装下这几种状态的全部组合
//    dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
//              max( 今天选择 rest,        今天选择 sell       )
//    今天没有持有股票，有两种可能，我从这两种可能中求最大利润：
//1、我昨天就没有持有，且截至昨天最大交易次数限制为 k；然后我今天选择 rest，所以我今天还是没有持有，最大交易次数限制依然为 k。
//2、我昨天持有股票，且截至昨天最大交易次数限制为 k；但是今天我 sell 了，所以我今天没有持有股票了，最大交易次数限制依然为 k。
//    dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
//              max( 今天选择 rest,         今天选择 buy         )
//    今天持有着股票，最大交易次数限制为 k，那么对于昨天来说，有两种可能，我从这两种可能中求最大利润：
//1、我昨天就持有着股票，且截至昨天最大交易次数限制为 k；然后今天选择 rest，所以我今天还持有着股票，最大交易次数限制依然为 k。
//2、我昨天本没有持有，且截至昨天最大交易次数限制为 k - 1；但今天我选择 buy，所以今天我就持有股票了，最大交易次数限制为 k。
//    状态k的定义不是已进行的交易次数，而是最大交易次数的上限限制，如果确定今天进行一次交易，且要保证截至今天最大交易次数上限为 k，那么昨天的最大交易次数上限必须是 k - 1。
//    并且买入卖出才算是一次完整的交易
// base case
//dp[-1][...][0] = 0
//解释：因为 i 是从 0 开始的，所以 i = -1 意味着还没有开始，这时候的利润当然是 0。
//dp[-1][...][1] = -infinity
//解释：还没开始的时候，是不可能持有股票的。
//因为我们的算法要求一个最大值，所以初始值设为一个最小值，方便取最大值。
//dp[...][0][0] = 0
//解释：因为 k 是从 1 开始的，所以 k = 0 意味着根本不允许交易，这时候利润当然是 0。
//dp[...][0][1] = -infinity
//解释：不允许交易的情况下，是不可能持有股票的。
//因为我们的算法要求一个最大值，所以初始值设为一个最小值，方便取最大值。

// 即
//dp[-1][...][0] = dp[...][0][0] = 0
//dp[-1][...][1] = dp[...][0][1] = -infinity
//
//状态转移方程：
//dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
//dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])

}
